import java.text.SimpleDateFormat

plugins {
  id "java"
  id "groovy"
  id "idea"
  id "maven-publish"
  id "org.ajoberstar.release-opinion" version "1.4.2"
  id "com.github.hierynomus.license" version "0.12.1"
  id "com.jfrog.bintray" version "1.7"
}

group = "com.hierynomus"
defaultTasks "build"

repositories {
  mavenCentral()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

configurations.compile.transitive = false

def bouncycastleVersion = "1.54"

dependencies {
  compile "org.slf4j:slf4j-api:1.7.13"
  compile "org.bouncycastle:bcprov-jdk15on:$bouncycastleVersion"
  compile "org.bouncycastle:bcpkix-jdk15on:$bouncycastleVersion"
  compile 'net.engio:mbassador:1.2.4.2'
  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
  testCompile 'commons-io:commons-io:2.5'
  testRuntime 'ch.qos.logback:logback-classic:1.1.3'
}

license {
  mapping {
    java = 'SLASHSTAR_STYLE'
  }
  exclude 'com/hierynomus/protocol/commons/Base64.java'
}

release {
  grgit = org.ajoberstar.grgit.Grgit.open(project.projectDir)
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
  }
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
  integrationTest {
    groovy {
      compileClasspath += sourceSets.main.output + sourceSets.test.output
      runtimeClasspath += sourceSets.main.output + sourceSets.test.output
      srcDir file('src/it/groovy')
    }
    resources.srcDir file('src/it/resources')
  }
}

task integrationTest(type: Test) {
  testClassesDir = sourceSets.integrationTest.output.classesDir
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
  afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

license {
  header rootProject.file('LICENSE')
  strictCheck true
  excludes(['**/*.txt', '**/*.properties'])
}

project.tasks.compileGroovy.onlyIf { false }

publishing {
  publications {
    Smbj(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
}

bintray {
  user = project.property("bintrayUsername")
  key = project.property("bintrayApiKey")
  publish = true
  publications = ["Smbj"]
  pkg {
    repo = "maven"
    name = project.name
    licenses = ["Apache-2.0"]
    vcsUrl = "https://github.com/hierynomus/smbj.git"
    labels = ["smb2", "smb3", "network", "windows", "file-transfer"]
    githubRepo = "hierynomus/smbj"
    version {
      name = project.version.toString()
      vcsTag = "v${project.version}"
      released = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm:ss.SSSZZ').format(new Date())
      gpg {
        sign = true
        passphrase = project.property("signing.password")
      }
      mavenCentralSync {
        sync = true
        user = project.property("sonatypeUsername")
        password = project.property("sonatypePassword")
        close = 1
      }
    }
  }
}

project.tasks.release.dependsOn(project.tasks.bintrayUpload)
